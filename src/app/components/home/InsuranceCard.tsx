"use client";

import * as React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ArrowRight, Star } from "lucide-react";
import CompareCard from "./CompareCard";
import Link from "next/link";

// ----- TYPES (scores are individual fields) -----
export type ScoreKey =
    | "Claims"
    | "Service"
    | "Pricing"
    | "Coverage"
    | "Transparency & Trust";

export type Insurer = {
    id: number;
    name: string;
    logoUrl: string;
    priceUSD: number;
    rating: number;
    profileHref?: string;
    // individual score fields (0..5)
    claims: number;
    service: number;
    pricing: number;
    coverage: number;
    digitalTools: number;
};

const metricColors: Record<ScoreKey, string> = {
    Claims: "bg-emerald-500",
    Service: "bg-cyan-500",
    Pricing: "bg-amber-500",
    Coverage: "bg-fuchsia-500",
    "Transparency & Trust": "bg-orange-500",
};

function Meter({ value, colorClass }: { value: number; colorClass: string }) {
    const pct = Math.max(0, Math.min(100, (value / 5) * 100));

    return (
        <div className="flex items-center gap-3 w-full">
            {/* Background gray bar */}
            <div className="relative h-2 w-full rounded-full bg-gray-300">
                {/* Colored portion */}
                <div
                    className={`absolute left-0 top-0 h-2 rounded-full ${colorClass} transition-all duration-500`}
                    style={{ width: `${pct}%` }}
                />
            </div>
            <span className="text-muted-foreground text-sm tabular-nums">
                {value.toFixed(1)}
            </span>
        </div>
    );
}


export function InsuranceCard({ data }: { data: Insurer }) {
    // build rows from individual fields
    const rows: Array<{ label: ScoreKey; value: number }> = [
        { label: "Claims", value: data.claims },
        { label: "Service", value: data.service },
        { label: "Pricing", value: data.pricing },
        { label: "Coverage", value: data.coverage },
        { label: "Transparency & Trust", value: data.digitalTools },
    ];


    const [selected, setSelected] = React.useState<Insurer[]>([]);
    // const [isOpen, setIsOpen] = React.useState(false);
    const handleCompareChange = (data: Insurer, checked: boolean) => {
        // প্রথমে previous selected items localStorage থেকে নিয়ে আসা
        const stored = localStorage.getItem("selectedInsurers");
        const prevSelected: Insurer[] = stored ? JSON.parse(stored) : [];

        let newSelected: Insurer[];

        if (checked) {
            // Prevent duplicates
            if (!prevSelected.some(i => i.id === data.id)) {
                newSelected = [...prevSelected, data];
            } else {
                newSelected = prevSelected;
            }
        } else {
            // Remove if unchecked
            newSelected = prevSelected.filter(i => i.id !== data.id);
        }

        // Save updated array to localStorage
        localStorage.setItem("selectedInsurers", JSON.stringify(newSelected));

        // Optional: state update যদি চান
        setSelected(newSelected);
    };
    const [openCompareModal, setOpenCompareModal] = React.useState(false);


    React.useEffect(() => {
        const stored = localStorage.getItem("selectedInsurers");
        if (stored) {
            try {
                const parsed: Insurer[] = JSON.parse(stored);
                setSelected(parsed);

            } catch (error) {
                console.error("Failed to parse localStorage:", error);
            }
        }
    }, []);

    const handleOpenModal = () => {
        if (selected.length === 0 || selected.length < 2 || !selected) {
            alert("Please select at least 2 items to compare");
        } else {
            setOpenCompareModal(true);
        }
    };


    const modalRef = React.useRef<HTMLDivElement>(null);

    // Open modal when component mounts
    React.useEffect(() => {
        setOpenCompareModal(false);
    }, []);

    // Close modal if clicked outside
    const handleClickOutside = (event: MouseEvent) => {
        if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
            setOpenCompareModal(false);
        }
    };

    React.useEffect(() => {
        if (openCompareModal) {
            document.addEventListener('mousedown', handleClickOutside);
        } else {
            document.removeEventListener('mousedown', handleClickOutside);
        }
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [openCompareModal]);




    return (
        <>
            <Card className="rounded-2xl border border-muted-foreground/10 shadow-sm bg-[#FAF5EC] backdrop-blur-sm">
                <CardContent className="p-5">
                    {/* Header */}
                    <div className="flex items-start gap-4">
                        <div className="border border-[#E9D1A7] rounded-[6px] flex justify-center items-center shadow-sm shrink-0 w-[68px] h-[71px]">
                            {/* Logo placeholder */}
                            <span>
                                <svg width="37" height="29" viewBox="0 0 37 29" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M35.6811 17.5517C35.6811 19.3842 35.398 21.1477 34.8791 22.8065H16.4445L32.1969 7.05396C34.3865 9.98124 35.6811 13.6153 35.6811 17.5517Z" fill="#F79F1E" />
                                    <path d="M6.16666 22.1068C6.17181 21.6971 6.04329 21.5075 5.65407 21.2801C5.29095 21.068 4.92698 20.5273 4.9073 20.1148C4.82549 18.3987 4.8529 16.676 4.88284 14.9565C4.89779 14.0973 5.37444 13.6705 6.25741 13.6591C7.52741 13.6427 8.79829 13.6351 10.0675 13.6692C10.3972 13.678 10.7225 13.8552 11.0497 13.9551C11.0485 14.0377 11.0471 14.1202 11.0458 14.2028C9.58962 14.7092 9.18006 15.7878 9.23141 17.2078C9.29162 18.8727 9.20504 20.5431 9.26923 22.2077C9.27663 22.4 9.3017 22.6044 9.34391 22.8065H10.2379C10.1897 22.5889 10.1731 22.3232 10.1728 21.9822C10.1707 20.2372 10.1658 18.4922 10.1729 16.7473C10.1775 15.5866 10.6581 15.0994 11.802 15.0924C13.1768 15.0839 14.5517 15.0809 15.9265 15.0921C17.0294 15.1011 17.5117 15.5878 17.5184 16.7051C17.5283 18.379 17.5153 20.0531 17.5241 21.727L18.4462 20.8049C18.4461 19.6005 18.4186 18.3953 18.4618 17.1925C18.5131 15.7702 18.0871 14.7008 16.4034 14.1153C16.9086 13.8738 17.2021 13.6188 17.5037 13.6088C18.8509 13.5641 20.2007 13.5713 21.5489 13.5961C22.3478 13.6108 22.7786 14.0275 22.792 14.8335C22.8009 15.3674 22.8094 15.9017 22.8152 16.4359L32.1971 7.054C28.9961 2.77018 23.8865 0 18.1296 0C11.2628 0 5.32075 3.94595 2.43704 9.69181C1.24998 12.057 0.57785 14.7252 0.57785 17.5517C0.57785 19.3842 0.860992 21.1477 1.3822 22.8065H6.16352C6.16474 22.5733 6.16375 22.34 6.16666 22.1068ZM19.5715 8.31869C20.8785 8.33064 21.9273 9.39096 21.9246 10.6977C21.922 12.0002 20.87 13.0726 19.5746 13.0933C18.235 13.1148 17.1555 12.047 17.1555 10.7004C17.1555 9.33769 18.2018 8.30623 19.5715 8.31869ZM13.9393 9.18574C15.412 9.22538 16.5641 10.4519 16.5277 11.9415C16.4909 13.4496 15.2263 14.6216 13.7114 14.5517C12.2298 14.4833 11.1152 13.258 11.1673 11.7552C11.2187 10.2789 12.4414 9.14549 13.9393 9.18574ZM8.19457 8.39952C9.50888 8.41526 10.5388 9.4611 10.5376 10.7786C10.5363 12.1447 9.49408 13.1723 8.12269 13.1596C6.80735 13.1473 5.77477 12.105 5.77153 10.7861C5.76825 9.44597 6.84708 8.3834 8.19457 8.39952Z" fill="#EB001B" />
                                    <path d="M-1.52588e-05 24.4078V23.4017H1.01368V24.4078H-1.52588e-05ZM-1.52588e-05 28.9241V24.9601H1.01368V28.9241H-1.52588e-05Z" fill="#414042" />
                                    <path d="M5.80228 28.9241H4.78853V26.7C4.78853 26.3823 4.73296 26.1503 4.6221 26.004C4.51111 25.8578 4.35733 25.7846 4.16063 25.7846C4.05971 25.7846 3.95639 25.8048 3.85046 25.8452C3.74457 25.8856 3.64491 25.9423 3.55166 26.0154C3.45828 26.0886 3.37385 26.1755 3.29823 26.2764C3.22261 26.3773 3.16704 26.4882 3.1318 26.6092V28.9241H2.1181V24.96H3.03345V25.6939C3.17964 25.4418 3.39147 25.2451 3.6689 25.1038C3.94618 24.9627 4.25898 24.892 4.60697 24.892C4.85399 24.892 5.05579 24.9374 5.21219 25.0281C5.36845 25.1189 5.48947 25.2375 5.57531 25.3837C5.66101 25.53 5.72023 25.6965 5.75308 25.883C5.78583 26.0697 5.80228 26.2588 5.80228 26.4504V28.9241Z" fill="#414042" />
                                    <path d="M8.37426 28.9998C8.04141 28.9998 7.7161 28.9469 7.39838 28.8409C7.08066 28.735 6.80829 28.5837 6.58133 28.387L6.95959 27.7515C7.20168 27.9231 7.43736 28.0529 7.6669 28.1411C7.89635 28.2294 8.12458 28.2735 8.35154 28.2735C8.5532 28.2735 8.71209 28.2357 8.82814 28.16C8.94411 28.0844 9.00216 27.976 9.00216 27.8347C9.00216 27.6936 8.93408 27.5902 8.79792 27.5246C8.66176 27.4591 8.43977 27.3834 8.13221 27.2976C7.87498 27.227 7.65561 27.1589 7.47405 27.0934C7.29249 27.0279 7.14616 26.9534 7.0353 26.8702C6.92431 26.787 6.84357 26.6912 6.7932 26.5827C6.74274 26.4744 6.71758 26.3444 6.71758 26.1931C6.71758 25.9915 6.75656 25.8099 6.83481 25.6485C6.91292 25.4871 7.02265 25.3497 7.16387 25.2362C7.305 25.1227 7.47025 25.0357 7.65936 24.9752C7.84851 24.9147 8.05392 24.8844 8.27592 24.8844C8.57344 24.8844 8.85204 24.9273 9.11185 25.013C9.37156 25.0989 9.60982 25.2375 9.82675 25.4291L9.41823 26.0418C9.21647 25.8906 9.02109 25.7797 8.83194 25.709C8.64279 25.6384 8.45485 25.6031 8.26833 25.6031C8.09679 25.6031 7.95309 25.6384 7.83712 25.709C7.72107 25.7797 7.66315 25.8932 7.66315 26.0494C7.66315 26.1201 7.67698 26.1781 7.70476 26.2234C7.7324 26.2688 7.77663 26.3092 7.83717 26.3444C7.89771 26.3798 7.97712 26.4138 8.07547 26.4466C8.17382 26.4794 8.29607 26.5135 8.44239 26.5487C8.71476 26.6194 8.94795 26.69 9.14216 26.7605C9.33628 26.8312 9.49512 26.9118 9.61877 27.0026C9.74228 27.0934 9.83308 27.1981 9.89113 27.3166C9.94905 27.4351 9.97809 27.5775 9.97809 27.744C9.97809 28.1324 9.83439 28.4388 9.54689 28.6631C9.2594 28.8876 8.86849 28.9998 8.37426 28.9998Z" fill="#414042" />
                                    <path d="M12.0357 28.9998C11.6272 28.9998 11.3171 28.8687 11.1052 28.6064C10.8934 28.3442 10.7875 27.9558 10.7875 27.4414V24.9601H11.8012V27.222C11.8012 27.8323 12.0206 28.1374 12.4594 28.1374C12.6561 28.1374 12.8464 28.0782 13.0305 27.9596C13.2146 27.8412 13.3646 27.6608 13.4806 27.4187V24.9601H14.4943V27.7592C14.4943 27.8651 14.5132 27.9407 14.5511 27.9861C14.5889 28.0315 14.6506 28.0568 14.7364 28.0618V28.9242C14.6354 28.9443 14.5511 28.9569 14.483 28.962C14.4149 28.9669 14.353 28.9695 14.2976 28.9695C14.1161 28.9695 13.9686 28.9279 13.8551 28.8447C13.7416 28.7615 13.6747 28.6468 13.6546 28.5005L13.632 28.1828C13.4554 28.4552 13.2284 28.6594 12.9511 28.7955C12.6736 28.9317 12.3686 28.9998 12.0357 28.9998Z" fill="#414042" />
                                    <path d="M18.0499 25.8376C17.7422 25.8427 17.4673 25.9019 17.2253 26.0154C16.9832 26.1289 16.8092 26.2991 16.7033 26.526V28.9241H15.6896V24.96H16.62V25.8073C16.6906 25.6711 16.7738 25.5489 16.8697 25.4404C16.9655 25.332 17.0689 25.2374 17.1799 25.1567C17.2907 25.076 17.403 25.0142 17.5165 24.9713C17.63 24.9286 17.7397 24.907 17.8456 24.907C17.901 24.907 17.9426 24.907 17.9704 24.907C17.9981 24.907 18.0245 24.9096 18.0498 24.9146L18.0499 25.8376Z" fill="#414042" />
                                    <path d="M19.8353 28.9998C19.6435 28.9998 19.4646 28.9682 19.2982 28.9052C19.1317 28.8423 18.988 28.7539 18.867 28.6405C18.7459 28.527 18.6513 28.3946 18.5833 28.2433C18.5152 28.092 18.4811 27.9256 18.4811 27.744C18.4811 27.5575 18.5228 27.3847 18.6059 27.2258C18.6891 27.0669 18.8051 26.932 18.954 26.8211C19.1026 26.7102 19.2804 26.6232 19.4873 26.5601C19.694 26.4971 19.921 26.4655 20.1682 26.4655C20.3446 26.4655 20.5173 26.4807 20.6863 26.5109C20.8552 26.5412 21.0053 26.5841 21.1365 26.6395V26.4126C21.1365 26.1504 21.062 25.9486 20.9132 25.8074C20.7644 25.6662 20.5437 25.5955 20.2513 25.5955C20.0395 25.5955 19.8326 25.6333 19.631 25.709C19.4292 25.7847 19.2225 25.8956 19.0107 26.0419L18.7005 25.3988C19.2099 25.061 19.7596 24.892 20.3497 24.892C20.9196 24.892 21.3621 25.0319 21.6773 25.3118C21.9924 25.5917 22.1502 25.9965 22.1502 26.526V27.7591C22.1502 27.865 22.1691 27.9407 22.2069 27.9861C22.2447 28.0315 22.3065 28.0568 22.3922 28.0617V28.9241C22.2207 28.9594 22.0719 28.9771 21.9459 28.9771C21.7541 28.9771 21.6066 28.9342 21.5033 28.8485C21.3999 28.7628 21.3356 28.6493 21.3104 28.508L21.2878 28.2886C21.1112 28.5207 20.8969 28.6972 20.6447 28.8182C20.3925 28.9393 20.1228 28.9998 19.8353 28.9998ZM20.1228 28.2584C20.2941 28.2584 20.4568 28.2282 20.6107 28.1676C20.7645 28.1071 20.8842 28.0265 20.97 27.9255C21.0809 27.8398 21.1365 27.744 21.1365 27.6381V27.1841C21.0154 27.1387 20.8842 27.1022 20.7431 27.0744C20.6019 27.0468 20.4657 27.0328 20.3346 27.0328C20.0723 27.0328 19.858 27.0922 19.6916 27.2106C19.5251 27.3292 19.442 27.4792 19.442 27.6607C19.442 27.8323 19.5074 27.9747 19.6386 28.0881C19.7697 28.2017 19.931 28.2584 20.1228 28.2584Z" fill="#414042" />
                                    <path d="M26.969 28.9241H25.9553V26.7C25.9553 26.3823 25.8997 26.1503 25.7888 26.004C25.6779 25.8578 25.5241 25.7846 25.3274 25.7846C25.2264 25.7846 25.1231 25.8048 25.0171 25.8452C24.9113 25.8856 24.8116 25.9423 24.7184 26.0154C24.625 26.0886 24.5406 26.1755 24.465 26.2764C24.3893 26.3773 24.3337 26.4882 24.2985 26.6092V28.9241H23.2848V24.96H24.2002V25.6939C24.3463 25.4418 24.5582 25.2451 24.8357 25.1038C25.113 24.9627 25.4257 24.892 25.7737 24.892C26.0207 24.892 26.2225 24.9374 26.3788 25.0281C26.5351 25.1189 26.6562 25.2375 26.742 25.3837C26.8277 25.53 26.8869 25.6965 26.9198 25.883C26.9525 26.0697 26.9689 26.2588 26.9689 26.4504L26.969 28.9241Z" fill="#414042" />
                                    <path d="M27.7935 26.9421C27.7935 26.6648 27.8415 26.4025 27.9373 26.1554C28.033 25.9084 28.1718 25.6914 28.3534 25.5048C28.5349 25.3183 28.7543 25.1695 29.0115 25.0585C29.2687 24.9476 29.5587 24.892 29.8815 24.892C30.3151 24.892 30.6846 24.9854 30.9897 25.1719C31.2949 25.3586 31.5231 25.6031 31.6743 25.9057L30.6834 26.2084C30.5975 26.0621 30.484 25.95 30.3429 25.8717C30.2016 25.7936 30.0453 25.7545 29.8739 25.7545C29.7276 25.7545 29.5914 25.7836 29.4654 25.8415C29.3392 25.8995 29.2296 25.9802 29.1363 26.0836C29.0429 26.187 28.9698 26.3119 28.9169 26.458C28.864 26.6044 28.8374 26.7657 28.8374 26.9422C28.8374 27.1188 28.8652 27.2802 28.9207 27.4264C28.9761 27.5728 29.0505 27.6988 29.1438 27.8046C29.2371 27.9105 29.3468 27.9926 29.4729 28.0505C29.5989 28.1085 29.7326 28.1375 29.874 28.1375C30.0555 28.1375 30.2231 28.0921 30.377 28.0013C30.5307 27.9105 30.638 27.7997 30.6985 27.6685L31.6895 27.9711C31.5534 28.2737 31.3289 28.5208 31.0162 28.7125C30.7035 28.9042 30.3278 29 29.889 29C29.5661 29 29.2762 28.9444 29.019 28.8335C28.7619 28.7227 28.5424 28.5725 28.3608 28.3834C28.1793 28.1943 28.0394 27.9749 27.941 27.7253C27.8428 27.4754 27.7935 27.2145 27.7935 26.9421Z" fill="#414042" />
                                    <path d="M34.2995 28.9998C33.9818 28.9998 33.6943 28.9455 33.4371 28.8371C33.1799 28.7287 32.9605 28.5812 32.7789 28.3946C32.5974 28.2081 32.4575 27.9912 32.3591 27.744C32.2607 27.497 32.2116 27.2372 32.2116 26.9648C32.2116 26.6824 32.2594 26.4163 32.3553 26.1667C32.451 25.917 32.5898 25.6977 32.7713 25.5085C32.9529 25.3194 33.1734 25.1694 33.4333 25.0584C33.693 24.9475 33.9843 24.892 34.307 24.892C34.6298 24.892 34.9185 24.9475 35.1732 25.0584C35.4278 25.1694 35.6447 25.3182 35.8238 25.5047C36.0028 25.6914 36.139 25.9083 36.2323 26.1553C36.3256 26.4025 36.3722 26.6597 36.3722 26.927C36.3722 26.9926 36.371 27.0556 36.3685 27.1161C36.3659 27.1766 36.3596 27.2271 36.3496 27.2674H33.2858C33.3009 27.4238 33.3387 27.5624 33.3993 27.6835C33.4598 27.8045 33.5379 27.9079 33.6337 27.9936C33.7295 28.0795 33.838 28.1449 33.9591 28.1903C34.0801 28.2357 34.206 28.2584 34.3373 28.2584C34.539 28.2584 34.7294 28.2093 34.9084 28.1109C35.0874 28.0125 35.2098 27.8827 35.2754 27.7213L36.1453 27.9634C35.999 28.266 35.7658 28.5144 35.4456 28.7085C35.1252 28.9028 34.7433 28.9998 34.2995 28.9998ZM35.3283 26.6092C35.303 26.3118 35.1933 26.0734 34.9992 25.8943C34.805 25.7154 34.5692 25.6258 34.2919 25.6258C34.1557 25.6258 34.0283 25.6498 33.9099 25.6977C33.7914 25.7457 33.6867 25.8125 33.596 25.8982C33.5052 25.984 33.4307 26.0873 33.3728 26.2083C33.3148 26.3294 33.2807 26.463 33.2706 26.6093L35.3283 26.6092Z" fill="#414042" />
                                </svg>

                            </span>
                        </div>

                        <div className="flex-1">
                            <h3 className="text-lg font-medium text-[#000000] leading-none">{data.name}</h3>
                            <div className="mt-2 flex items-center gap-3">
                                <span className="text-lg font-medium text-[#529F22] leading-none">
                                    ${data.priceUSD}
                                </span>
                                <div className=" w-1.5 h-1.5 bg-black rounded-full  " ></div>
                                <div>
                                    <h1 className=" text-lg font-bold text-[#23C223] " >A+</h1>
                                </div>
                                <div className=" w-1.5 h-1.5 bg-black rounded-full  " ></div>
                                <Badge className="gap-1 bg-[#D9AE66] rounded-md px-2 py-1 text-xs">
                                    <Star className="h-3 w-3 fill-[#FFF07E] text-[#FFF07E]" />
                                    {data.rating.toFixed(1)}
                                </Badge>
                            </div>
                        </div>
                    </div>

                    {/* Metrics */}
                    <div className="mt-5 gap-y-3">
                        {rows.map((r) => (
                            <React.Fragment key={r.label}>
                                <div className="flex flex-row">
                                    <div className="text-muted-foreground w-[200px]">{r.label}</div>
                                    <Meter value={r.value} colorClass={metricColors[r.label]} />
                                </div>
                            </React.Fragment>
                        ))}
                    </div>

                    {/* Footer */}
                    <div className="mt-6 flex items-center justify-between">
                        <div className=" flex flex-row items-center gap-x-3 " >
                            <label className="flex items-center gap-2 text-sm">
                                <Checkbox
                                    id={`compare-${data.id}`}
                                    checked={selected.some(i => i.id === data.id)}
                                    onCheckedChange={(checked) => handleCompareChange(data, checked as boolean)}
                                />

                            </label>
                            <button onClick={handleOpenModal} className=" cursor-pointer text-[16px] text-[#697079] ">Compare</button>
                        </div>

                        <Button
                            variant="ghost"
                            className="text-amber-600 hover:text-amber-700 hover:bg-amber-50"
                            asChild
                        >
                            <Link href={`/insurance-profile/${data?.id}`}>
                                View Profile <ArrowRight className="ml-1 h-4 w-4" />
                            </Link>
                        </Button>
                    </div>
                </CardContent>
            </Card>


            <>


                {
                    openCompareModal && (
                        <CompareCard openCompareModal={openCompareModal} modalRef={modalRef} selected={selected} ></CompareCard>
                    )
                }
            </>


        </>
    );
}
